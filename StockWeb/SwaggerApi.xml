<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StockWeb</name>
    </assembly>
    <members>
        <member name="M:StockWeb.Controllers.AccountController.Login(StockWeb.Models.RequestParms.LoginParm)">
            <summary>
            登入取token
            </summary>
            <param name="parm"></param>
            <returns></returns>
        </member>
        <member name="M:StockWeb.Controllers.AccountController.RegisterAccount(StockWeb.Models.RequestParms.RegisterAccountParm)">
            <summary>
            註冊帳號
            </summary>
            <param name="parm"></param>
            <returns></returns>
        </member>
        <member name="M:StockWeb.Controllers.StockController.UpdateStockBaseInfo">
            <summary>
            更新DB上市櫃股票基本資訊
            </summary>
            <returns></returns>
        </member>
        <member name="M:StockWeb.Controllers.StockController.UpdateStockDayInfo(StockWeb.Models.RequestParms.UpdateStockDayInfoParm)">
            <summary>
            往前或往後更新股票日成交資訊
            </summary>
            <param name="parm"></param>
            <returns></returns>
        </member>
        <member name="M:StockWeb.Controllers.StockController.Strategy1(System.DateOnly)">
            <summary>
            20個交易日內，投信買超超過總張數1%
            </summary>
            <param name="date" example="2023-08-01"></param>
            <returns></returns>
        </member>
        <member name="M:StockWeb.DbModels.StockBaseInfo.UpdateStockBaseInfo(StockWeb.DbModels.StockBaseInfo)">
            <summary>
            輸入一個新的StockBaseInfo來更新來自DB的StockBaseInfo的資訊，ID要一樣
            </summary>
            <param name="stockBaseInfo"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="P:StockWeb.DbModels.StockDayInfo.Date">
            <summary>
            測試測試
            </summary>
        </member>
        <member name="M:StockWeb.Extensions.DateTimeExtension.ToDateFormateString1(System.DateTime)">
            <summary>
            返回 20230526的格式
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:StockWeb.Extensions.DateTimeExtension.ToDateFormateString2(System.DateTime)">
            <summary>
            返回111/05/26的格式
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:StockWeb.Extensions.DateTimeExtension.ToDateFormateForTse(System.DateOnly)">
            <summary>
            返回 20230526的格式
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:StockWeb.Extensions.DateTimeExtension.ToDateFormateForOtc(System.DateOnly)">
            <summary>
            返回2024/11/21的格式
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:StockWeb.Extensions.DateTimeExtension.ToDateOnly(System.String)">
            <summary>
            將 111/05/26的字串轉換為DateOnly物件
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StockWeb.Extensions.DateTimeExtension.ToDateOnly3(System.String)">
            <summary>
            將 111/05的字串轉換為DateOnly物件
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StockWeb.Extensions.DateTimeExtension.ToTaiwanYear(System.DateOnly)">
            <summary>
            取得民國幾年
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:StockWeb.Extensions.StringExtensions.ToDouble(System.String)">
            <summary>
            嘗試轉換成double，如果轉換失敗回傳0
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:StockWeb.Models.RequestParms.LoginParm.account">
            <summary>
            
            </summary>
            <example>Test123</example>
        </member>
        <member name="P:StockWeb.Models.RequestParms.LoginParm.password">
            <summary>
            
            </summary>
            <example>Test123</example>
        </member>
        <member name="P:StockWeb.Models.RequestParms.UpdateStockDayInfoParm.IsHistoricalUpdate">
            <summary>
            true:更新舊資料、false:更新新資料
            </summary>
            <example>false</example>
        </member>
        <member name="M:StockWeb.Program.CreateSystemLogger">
            <summary>
            在主要log建立之前，先配置的一個簡單系統log，用於記錄系統的開啟關閉事件。
            如果使用網路上的Log.Logger寫法而不是var systemLogger，則全局的Log.Logger會在UseSeriLog的時候被替換掉，故這邊使用局部的logger
            </summary>
            <returns></returns>
        </member>
        <member name="F:StockWeb.Services.ServicesForControllers.StockService._semaphoreSlimForDbContext">
            <summary>
            因為刪除資料跟更新上市與上櫃資料的時候可能都會用到DbContext，這樣同一個實例的DbContext會打架，要馬用非同步鎖鎖住，要馬注入ServiceScopeFactory來CeateScope取得新的DbContext
            </summary>
        </member>
        <member name="M:StockWeb.Services.ServicesForControllers.StockService.UpdateStockBaseInfo">
            <summary>
            更新股票基本資訊表
            </summary>
            <returns></returns>
        </member>
        <member name="M:StockWeb.Services.ServicesForControllers.StockService.UpdateStockDayInfo(System.Boolean)">
            <summary>
            依據參數isHistoricalUpdate往前或往後更新日成交資訊，如果Db沒有資料，插入2021/1/4的資料
            </summary>
            <param name="isHistoricalUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:StockWeb.Services.ServicesForControllers.StockService.GetDateMaxOrMinFromStockDayInfoAsync(System.Boolean)">
            <summary>
            取得StockDayInfo最小或最大的交易日期
            </summary>
            <param name="isHistoricalUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:StockWeb.Services.ServicesForControllers.StockService.UpdateStockDayInfoByDate(System.DateOnly)">
            <summary>
            更新指定日期的日成交資訊
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:StockWeb.Services.ServicesForControllers.StockService.DeleteDayInfoRange(System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
            刪除指定期間內的日成交資料
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:StockWeb.Services.ServicesForControllers.StockService.取得上一個交易日的收盤價(System.Int32,System.DateOnly)">
            <summary>
            有時候成交量是0的時候，Api回傳的收盤價會是--，這個時候就使用這個method從資料庫拿前一個交易的收盤價
            </summary>
            <param name="stockId"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="P:StockWeb.StartUpConfigure.LoggingInterceptorAttribute.MethodName">
            <summary>
            執行方法的名字
            </summary>
        </member>
        <member name="P:StockWeb.StartUpConfigure.LoggingInterceptorAttribute.ErrorMessage">
            <summary>
            發生錯誤時的錯誤訊息
            </summary>
        </member>
        <member name="P:StockWeb.StartUpConfigure.LoggingInterceptorAttribute.StatusCode">
            <summary>
            發生錯誤時，在正式環境丟CustomErrorResponseException時，要回傳的狀態碼
            </summary>
        </member>
        <member name="M:StockWeb.StartUpConfigure.JwtConfigurator.JwtConfigure(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            配置jwt
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:StockWeb.StartUpConfigure.Middleware.CustomExceptionHandlerExtension.UseCustomExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            對於自己拋出的CustomErrorResponseException，使用Middleware統一處理
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:StockWeb.StartUpConfigure.Middleware.CustomErrorResponseException">
            <summary>
            這個自訂的Exception，用於給自訂的Middleware:CustomExceptionHandler捕捉，會按照訊息及狀態回傳Response
            </summary>
        </member>
        <member name="M:StockWeb.StartUpConfigure.Middleware.CustomErrorResponseException.#ctor(System.String,System.Int32)">
            <summary>
            這個自訂的Exception，用於給自訂的Middleware:CustomExceptionHandler捕捉，會按照訊息及狀態回傳Response
            </summary>
            <param name="message"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:StockWeb.StartUpConfigure.Middleware.RequestLogMiddlewareExtension.UseRequestLogMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用Middlware統一紀錄Request的log
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:StockWeb.StartUpConfigure.SerilogConfigurator.SerilogConfigure(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            配置SeriLog的設定並使用
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:StockWeb.StartUpConfigure.SwaggerConfigurator.SwaggerConfigure(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            註冊及設定Swagger文件
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:StockWeb.StartUpConfigure.SwaggerConfigurator.UserMySwagger(Microsoft.AspNetCore.Builder.WebApplication)">
            <summary>
            設定Swagger Middleware及UI
            </summary>
            <param name="app"></param>
        </member>
    </members>
</doc>
